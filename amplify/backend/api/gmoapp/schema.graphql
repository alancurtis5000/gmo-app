type Game @model {
  id: ID!
  name: String!
  description: String
  players: [User] @connection(name: "GamePlayers") # one to many relationship
  master: User! @connection # user who created game // one to one relationship
}

# Todo: Users and Character relationship and storing userSub
type User @model {
  id: ID!
  userSub: ID! # user sub attribute from auth
  name: String!
  game: Game @connection(name: "GamePlayers")
  playerName: String
  characters: [Character] @connection(name: "UserCharacters")
  selectedCharacter: Character @connection
}

type Character @model {
  id: ID!
  name: String!
  user: User! @connection(name: "UserCharacters")
  content: String
}

# here is where you add custom subscriptions.
type Subscription {
  newOnCreateGame: Game @aws_subscribe(mutations: ["createGame"])
  newOnDeleteGame: Game @aws_subscribe(mutations: ["deleteGame"])
  newOnUpdateGame: Game @aws_subscribe(mutations: ["updateGame"])
  newOnUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
}

# Add all the custom inputs here
input ExampleInput {
  lat: Float
  lon: Float
}

input SelectedCharacter {
  lat: Float
  lon: Float
}

# type Query {
# Add all the custom queries here

# TODO: left off here , need custom query to get user by userSub Id
# getUserByUserSub(userSub: ID!): User
# }

# type Mutation {
#   # Add all the custom mutations here
# }
