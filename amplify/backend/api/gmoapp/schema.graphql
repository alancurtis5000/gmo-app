type Game @model {
  id: ID!
  name: String!
  description: String
  players: [User] @connection(name: "GamePlayers") # one to many relationship
  master: User! @connection # user who created game // one to one relationship
  hasStarted: Boolean
}

# Todo: Users and Character relationship and storing userSub
type User @model {
  id: ID!
  userSub: ID! # user sub attribute from auth
  name: String!
  game: Game @connection(name: "GamePlayers")
  playerName: String
  characters: [Character] @connection(name: "UserCharacters")
  selectedCharacter: Character @connection
  isReady: Boolean
}

# here is where you add custom subscriptions.
type Subscription {
  newOnCreateGame: Game @aws_subscribe(mutations: ["createGame"])
  newOnDeleteGame: Game @aws_subscribe(mutations: ["deleteGame"])
  newOnUpdateGame: Game @aws_subscribe(mutations: ["updateGame"])
  newOnUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
}

# Add all the custom inputs here
input ExampleInput {
  lat: Float
  lon: Float
}

input SelectedCharacter {
  lat: Float
  lon: Float
}

# type Query {
# Add all the custom queries here

# TODO: left off here , need custom query to get user by userSub Id
# getUserByUserSub(userSub: ID!): User
# }

# type Mutation {
#   # Add all the custom mutations here
# }

type Character @model {
  id: ID!
  user: User! @connection(name: "UserCharacters")
  details: Detail!
  abilityScores: AbilityScores!
  savingThrows: SavingThrow
}

type SavingThrow {
  base: [BaseSavingThrow]
  skills: [SkillSavingThrow]
  resistances: [ResistanceSavingThrow]
}

type BaseSavingThrow {
  code: String
  title: String
  value: Int
}

type SkillSavingThrow {
  code: String
  title: String
  value: Int
  type: String
}

type ResistanceSavingThrow {
  id: ID!
  title: String
  details: String
}

type Detail {
  name: String
  background: String
  description: Description
  level: Int
  alignment: String
  race: String
  classes: [Class]
  experience: Int
}

type Class {
  id: ID!
  level: Int
  type: String
}

type Description {
  eyes: String
  hair: String
  skin: String
  size: String
  age: Int
}

type AbilityScore {
  value: Int
  modifier: Int
}

type AbilityScores {
  strength: AbilityScore
  dexterity: AbilityScore
  constitution: AbilityScore
  intelligence: AbilityScore
  wisdom: AbilityScore
  charisma: AbilityScore
}
